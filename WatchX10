#!/usr/bin/perl
##############################################################
# BERTHA Tentacle 6 - v.0.0.1
##############################################################
# LEVEL6 (https://github.com/lleevveell66)
##############################################################
# Reference:
# http://www.wgldesigns.com/protocols/w800rf32_protocol.txt
# http://www.smarthus.info/support/download/x10_RF_formats.pdf
##############################################################

$logfile="bertha_t6.log";
$comport="/dev/ttyUSB0";
$DEBUG=0;

use Device::SerialPort qw( :PARAM :STAT 0.07 );

# The com port setup is 4800, 8 bit, no parity, 1 stop bit
$port=Device::SerialPort->new($comport);
$port->baudrate(4800);			# 4800 bps
$port->databits(8);			# 8 data bits
$port->parity("none");			     # No parity
$port->stopbits(1);			         # 1 stop bit
$port->read_char_time(0);				# 0 delay on reading characters
$port->read_const_time(1000);		# 1 second per unfulfilled "read" call

# Open the log file for writing
open(LOG,">>$logfile") ||  die("ERROR opening $logfile: $! \n\n");
 
while(1)				# Will daemonize, later.  For now, run forevers!
{
 ($count,$saw)=$port->read(255);	# Read up to 255 characters (X-10 will repeat the same pattern)
 if($count>0) 				# Was there data read?
 {
  # Get the first four bytes (if there are any more, they are bullshit, anyway)
  $byte1=substr($saw,0,1);
  $byte2=substr($saw,1,1);
  $byte3=substr($saw,2,1);
  $byte4=substr($saw,3,1);

  # Reverse the bit order on each 8-bit byte, swapping words due to w800rf32 mixing things up
  $byte1r=pack b8 => unpack B8 => $byte3;	# Swap 3rd byte to 1st, and reverse bits
  $byte2r=pack b8 => unpack B8 => $byte4;	# Swap 4th byte to 2nd, and reverse bits
  $byte3r=pack b8 => unpack B8 => $byte1;	# Swap 1st byte to 3rd, and reverse bits
  $byte4r=pack b8 => unpack B8 => $byte2;	# Swap 2nd byte to 4th, and reverse bits

  # Convert the reversed bytes into hex strings for printing
  $byte1hex=uc(unpack('H*',$byte1r));		# Hex string of byte 1
  $byte2hex=uc(unpack('H*',$byte2r));		# Hex string of byte 2
  $byte3hex=uc(unpack('H*',$byte3r));		# Hex string of byte 3
  $byte4hex=uc(unpack('H*',$byte4r));		# Hex string of byte 4

  $byte1bin=dec2bin(hex($byte1hex));		# Bin string of byte 1
  $byte2bin=dec2bin(hex($byte2hex));		# Bin string of byte 2
  $byte3bin=dec2bin(hex($byte3hex));		# Bin string of byte 3
  $byte4bin=dec2bin(hex($byte4hex));		# Bin string of byte 4

  $extended_bits=substr($byte1bin,0,3);		# 000 = Standard X-10, anything else is Extended X-10

  if($DEBUG)
  {
   print "**************************************************************\n";
   print "TESTING: $byte1hex $byte2hex $byte3hex $byte4hex (4 of $count read)\n";
  }

  # Build a datetime stamp for the logging
  $DATESTAMP=`date '+%D %T'`;chop($DATESTAMP);

  if(! bin2dec($extended_bits)) 		# If Standard X-10, then...
  {
   $extended="NO";

   # House code is last nibble of byte 3
   $HouseCode=substr($byte3bin,4,4);
 
   # Don't ask me why.  It probably has something to do with dependability over AC lines?
   %housecodes=('0110'=>'A','1110'=>'B','0010'=>'C','1010'=>'D','0001'=>'E','1001'=>'F','0101'=>'G','1101'=>'H',
                '0111'=>'I','1111'=>'J','0011'=>'K','0011'=>'L','0000'=>'M','1000'=>'N','0100'=>'O','1100'=>'P');

   $hcstr=$housecodes{$HouseCode};		# Get the keyed house code letter

   $unitbit1=substr($byte3bin,-6,1);		# Unit code bit 1 is in byte 3, bit 5
   $unitbit2=substr($byte1bin,-2,1);		# Unit code bit 2 is in byte 1, bit 7
   $unitbit3=substr($byte1bin,-5,1);		# Unit code bit 3 is in byte 1, bit 4
   $unitbit4=substr($byte1bin,-4,1);		# Unit code bit 4 is in byte 1, bit 5
 
   # Build unit code strings
   $unitcodebin=$unitbit1.$unitbit2.$unitbit3.$unitbit4;
   $unitcode=bin2dec($unitcodebin)+1;		# Unit codes we know are 1 more than reality (they begin at 0)
 
   $on_off_bit=substr($byte1bin,-3,1);		# ON or OFF function is bit 6 of byte 1
   $dim_bright_bit=substr($byte1bin,-1,1);	# DIM or BRIGHT function is bit 8 of byte 1
  
   if(bin2dec($dim_bright_bit))			# If DIM/BRIGHT bit is 1, then ON/OFF bit means DIM or BRIGHT
   {
    if(bin2dec(on_off_bit))			# If DIM/BRIGHT=1 and ON/OFF=1 then DIM
    {
     $function="DIM";
    } else {					# If DIM/BRIGHT=1 and ON/OFF=0 then BRIGHT
            $function="BRIGHT";
           }
   } else {					# If DIM/BRIGHT bit is 0, then ON/OFF bit means ON or OFF
           if(bin2dec($on_off_bit))		# If DIM/BRIGHT=0 and ON/OFF=1 then OFF
           {
            $function="OFF";			
           } else {				# If DIM/BRIGHT=0 and ON/OFF=0 then ON
                   $function="ON";
                  }
          }

  } else { 					# If Extended X-10, then...
          $extended="YES";
          $devdec=bin2dec($byte3bin);		# Device ID is in byte 3
          $msgdec=bin2dec($byte1bin);		# Message Code is in byte 1

                                                                # ---[ Known Models ]--------------
          %msgcodes=('00000000'=>'ALERT (max delay)',		# DS10 DS90
                     '10000000'=>'ALERT (bat low, max)',	# DS10
                     '00100000'=>'ALERT',			# DS10 DS90 SD90
                     '10100000'=>'ALERT (battery low)',		# DS10      SD90
                     '00000001'=>'NORMAL (max delay)',		# DS10 DS90
                     '10000001'=>'NORMAL (bat low, max)',	# DS10      SD90
                     '00100001'=>'NORMAL',			# DS10 DS90 SD90
                     '10100001'=>'NORMAL (battery low)',	# DS10
                     '00000010'=>'ALERT+Tamper (mac delay)',	#      DS90
                     '00100010'=>'ALERT+Tamper',		#      DS90
                     '00000011'=>'NORMAL+Tamper (max delay)',	#      DS90
                     '00100011'=>'NORMAL+Tamper',		#      DS90
                     '00110000'=>'ALERT',			#                MS10 MS20 MS90
                     '00110001'=>'NORMAL',			#                MS10 MS20 MS90
                     '00000100'=>'Dark Sensor',			#                     MS20
                     '00110010'=>'ALERT+Tamper',		#                          MS90
                     '00110011'=>'NORMAL+Tamper',		#                          MS90
                     '00000100'=>'ARM AWAY (max)',		# SH624
                     '01000001'=>'DISARM',			# SH624
                     '01000010'=>'Lights On',			# SH624
                     '01000011'=>'Lights Off',			# SH624
                     '01000100'=>'PANIC',			# SH624
                     '01010000'=>'ARM AWAY (max)',		# SH624
                     '01100000'=>'ARM AWAY (min)',		# SH624 KR10
                     '01100001'=>'DISARM',			#       KR10
                     '01100010'=>'Light On',			#       KR10
                     '01100011'=>'Light Off',			#       KR10
                     '01100100'=>'PANIC',			#       KR10
                     '01110000'=>'ARM HOME (min)',		# SH624
                     '11000000'=>'PANIC',			# SH624      SD90
                     '00111000'=>'Temp =< Set',			#                 Digimax
                     '11010100'=>'Temp > Set',			#                 Digimax
                     '00000111'=>'MOTION',			#                         DM10
                     '00001111'=>'DARKNESS DETECTED',		#                         DM10
                     '00011111'=>'LIGHT DETECTED'		#                         DM10
                    );

          # Get the keyed Message string
          $msgstr=$msgcodes{$byte1bin};

         }

  if($DEBUG) { print "EXTENDED: $extended ($extended_bits)\n"; }

  if($extended=~/NO/)
  {
   if($DEBUG)
   {
    print "HOUSE CODE: $hcstr ($HouseCode) ($byte3bin)\n";
    print " UNIT CODE: $unitcode ($unitcodebin)\n";
    print "  FUNCTION: $function ($on_off_bit$dim_bright_bit)\n";
   }
   $id=$hcstr.$unitcode;
   $data=$function;
   $line=`grep $id bertha.devices`;chop($line);
   ($unit,$device_description)=split(':',$line);
   if(length($device_description)<1) { $device_description="Unknown Device"; }
   print "$DATESTAMP $hcstr$unitcode:$device_description:$function\n";
   print LOG "$DATESTAMP $hcstr$unitcode:$device_description:$function\n";
  } else {
          if($DEBUG)
          {
           print "DEVICE ADDRESS: $devdec ($byte3bin)\n";
           print "  MESSAGE CODE: $msgstr ($msgdec) ($byte1bin)\n";
          }
          $id=$devdec;
          $data=$msgstr;
          $line=`grep $id bertha.devices`;chop($line);
          ($unit,$device_description)=split(':',$line);
          if(length($device_description)<1) { $device_description="Unknown Device"; }
          print "$DATESTAMP $devdec:$device_description:$msgstr\n";
          print LOG "$DATESTAMP $devdec:$device_description:$msgstr\n";
         }
 
  $line=`grep $id bertha.actions|grep $data`;chop($line);
  ($unit,$function,$action)=split(':',$line);
  if(!length($action)<1 || !$action=~/NONE/) 
  {
   $function.=s/[^a-zA-Z0-9 _-]//g;
   $output=`actions/$action $unit '$function'`;
   if($DEBUG) { print "$output"; }
  }
 }
}

# Will never get here until signaling is added.

close(LOG);

exit(0);

# ------ Subroutines ------

sub dec2bin 
{
 my $str=unpack("B32",pack("N",shift));
 $str=substr($str,-8,8);
 return $str;
}

sub bin2dec 
{
 return unpack("N",pack("B32",substr("0" x 32 . shift,-32)));
}
